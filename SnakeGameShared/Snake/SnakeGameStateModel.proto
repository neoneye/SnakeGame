// Regenerate swift file
// PROMPT> protoc --swift_out=. SnakeGameStateModel.proto
syntax = "proto3";

message SnakeGameStateModelPosition {
	// The coordinate system origin is in the left/bottom corner.
	uint32 x = 1;
	uint32 y = 2;
}

message SnakeGameStateModelPlayer {
	enum HeadDirection {
		UP = 0;
		LEFT = 1;
		RIGHT = 2;
		DOWN = 3;
	}
	HeadDirection head_direction = 1;

	repeated SnakeGameStateModelPosition body_positions = 2;

	enum Action {
		DIE = 0;
		MOVE_FORWARD = 1;
		MOVE_CW = 2;
		MOVE_CCW = 3;
	}
	Action action = 3;
}

message SnakeGameStateModelLevel {
	// The level has a size: width * height.
	uint32 level_width = 1;
	uint32 level_height = 2;

	// Places where the snake can go.
	repeated SnakeGameStateModelPosition empty_positions = 3;
}

message SnakeGameStateIngameModel {
	SnakeGameStateModelLevel level = 1;

	// There may be food or there may be no food.
	oneof optional_food_position {
		SnakeGameStateModelPosition food_position = 2;
	}

	// While ingame it's uncertain which of the players becomes the winner or the looser.
	oneof optional_player_a {
		SnakeGameStateModelPlayer player_a = 3;
	}
	oneof optional_player_b {
		SnakeGameStateModelPlayer player_b = 4;
	}
}

message SnakeGameStateWinnerLooserModelStep {
	// There may be food or there may be no food.
	oneof optional_food_position {
		SnakeGameStateModelPosition food_position = 1;
	}

	// There is always the player A (the winner).
	SnakeGameStateModelPlayer player_a = 2;

	// There may be an opponent player B (the looser).
	oneof optional_player_b {
		SnakeGameStateModelPlayer player_b = 3;
	}
}

message SnakeGameStateWinnerLooserModel {
	SnakeGameStateModelLevel level = 1;

	repeated SnakeGameStateWinnerLooserModelStep steps = 2;
}
