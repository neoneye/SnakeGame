// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SnakeLevelCacheModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Regenerate swift file
/// PROMPT> protoc --swift_out=. SnakeLevelCacheModel.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SnakeLevelCacheModelDistanceKeyValuePair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyLow: UInt32 = 0

  var keyHigh: UInt32 = 0

  var valueDistance: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SnakeLevelCacheModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sha1: String = String()

  var distances: [SnakeLevelCacheModelDistanceKeyValuePair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SnakeLevelCacheModelDistanceKeyValuePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SnakeLevelCacheModelDistanceKeyValuePair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_low"),
    2: .standard(proto: "key_high"),
    3: .standard(proto: "value_distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.keyLow)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.keyHigh)
      case 3: try decoder.decodeSingularSInt32Field(value: &self.valueDistance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyLow != 0 {
      try visitor.visitSingularUInt32Field(value: self.keyLow, fieldNumber: 1)
    }
    if self.keyHigh != 0 {
      try visitor.visitSingularUInt32Field(value: self.keyHigh, fieldNumber: 2)
    }
    if self.valueDistance != 0 {
      try visitor.visitSingularSInt32Field(value: self.valueDistance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SnakeLevelCacheModelDistanceKeyValuePair, rhs: SnakeLevelCacheModelDistanceKeyValuePair) -> Bool {
    if lhs.keyLow != rhs.keyLow {return false}
    if lhs.keyHigh != rhs.keyHigh {return false}
    if lhs.valueDistance != rhs.valueDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SnakeLevelCacheModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SnakeLevelCacheModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sha1"),
    2: .same(proto: "distances"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sha1)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.distances)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sha1.isEmpty {
      try visitor.visitSingularStringField(value: self.sha1, fieldNumber: 1)
    }
    if !self.distances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.distances, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SnakeLevelCacheModel, rhs: SnakeLevelCacheModel) -> Bool {
    if lhs.sha1 != rhs.sha1 {return false}
    if lhs.distances != rhs.distances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
